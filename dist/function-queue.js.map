{
  "version": 3,
  "sources": ["../node_modules/.pnpm/short-unique-id@4.4.4/node_modules/short-unique-id/src/index.ts", "../src/index.ts"],
  "sourcesContent": ["// @module ShortUniqueId\n\n// Copyright 2017-2021 the Short Unique ID authors. All rights reserved. Apache 2.0 license.\n\n// @ts-ignore\nimport {version} from '../package.json';\n\ninterface ShortUniqueIdRanges {\n  [k: string]: [number, number];\n};\n\ntype defaultDictionaries = 'number' | 'alpha' | 'alpha_lower' | 'alpha_upper' | 'alphanum' | 'alphanum_lower' | 'alphanum_upper' | 'hex';\n\n/**\n * ```js\n * {\n *   dictionary: ['z', 'a', 'p', 'h', 'o', 'd', ...],\n *   shuffle: false,\n *   debug: false,\n *   length: 6,\n * }\n * ```\n */\nexport interface ShortUniqueIdOptions {\n  /** User-defined character dictionary */\n  dictionary: string[] | defaultDictionaries;\n\n  /** If true, sequentialUUID use the dictionary in the given order */\n  shuffle: boolean;\n\n  /** If true the instance will console.log useful info */\n  debug: boolean;\n\n  /** From 1 to infinity, the length you wish your UUID to be */\n  length: number;\n};\n\n/**\n * 6 was chosen as the default UUID length since for most cases\n * it will be more than aptly suitable to provide millions of UUIDs\n * with a very low probability of producing a duplicate UUID.\n *\n * For example, with a dictionary including digits from 0 to 9,\n * as well as the alphabet from a to z both in UPPER and lower case,\n * the probability of generating a duplicate in 1,000,000 rounds\n * is ~0.00000002, or about 1 in 50,000,000.\n */\nexport const DEFAULT_UUID_LENGTH: number = 6;\n\nconst DEFAULT_OPTIONS: ShortUniqueIdOptions = {\n  dictionary: 'alphanum',\n  shuffle: true,\n  debug: false,\n  length: DEFAULT_UUID_LENGTH,\n};\n\n/**\n * Generate random or sequential UUID of any length.\n *\n * ### Use as module\n *\n * ```js\n * // Deno (web module) Import\n * import ShortUniqueId from 'https://cdn.jsdelivr.net/npm/short-unique-id@latest/src/index.ts';\n *\n * // ES6 / TypeScript Import\n * import ShortUniqueId from 'short-unique-id';\n *\n * //or Node.js require\n * const ShortUniqueId = require('short-unique-id');\n *\n * //Instantiate\n * const uid = new ShortUniqueId();\n *\n * // Random UUID\n * console.log(uid());\n *\n * // Sequential UUID\n * console.log(uid.seq());\n * ```\n *\n * ### Use in browser\n *\n * ```html\n * <!-- Import -->\n * <script src=\"https://cdn.jsdelivr.net/npm/short-unique-id@latest/dist/short-unique-id.min.js\"></script>\n *\n * <!-- Usage -->\n * <script>\n *   // Instantiate\n *   var uid = new ShortUniqueId();\n *\n *   // Random UUID\n *   document.write(uid());\n *\n *   // Sequential UUID\n *   document.write(uid.seq());\n * </script>\n * ```\n *\n * ### Options\n *\n * Options can be passed when instantiating `uid`:\n *\n * ```js\n * const options = { ... };\n *\n * const uid = new ShortUniqueId(options);\n * ```\n *\n * For more information take a look at the [ShortUniqueIdOptions type definition](/interfaces/shortuniqueidoptions.html).\n */\nexport default class ShortUniqueId extends Function {\n  static default: typeof ShortUniqueId = ShortUniqueId;\n\n  public counter: number;\n  public debug: boolean;\n  public dict: string[];\n  public version: string;\n  public dictIndex: number = 0;\n  public dictRange: number[] =[];\n  public lowerBound: number = 0;\n  public upperBound: number = 0;\n  public dictLength: number = 0;\n  public uuidLength: number;\n\n  protected _digit_first_ascii: number = 48;\n  protected _digit_last_ascii: number = 58;\n  protected _alpha_lower_first_ascii: number = 97;\n  protected _alpha_lower_last_ascii: number = 123;\n  protected _hex_last_ascii: number = 103;\n  protected _alpha_upper_first_ascii: number = 65;\n  protected _alpha_upper_last_ascii: number = 91;\n\n  protected _number_dict_ranges: ShortUniqueIdRanges = {\n    digits: [this._digit_first_ascii, this._digit_last_ascii],\n  };\n\n  protected _alpha_dict_ranges: ShortUniqueIdRanges = {\n    lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii],\n    upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii],\n  };\n\n  protected _alpha_lower_dict_ranges: ShortUniqueIdRanges = {\n    lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii],\n  };\n\n  protected _alpha_upper_dict_ranges: ShortUniqueIdRanges = {\n    upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii],\n  };\n\n  protected _alphanum_dict_ranges: ShortUniqueIdRanges = {\n    digits: [this._digit_first_ascii, this._digit_last_ascii],\n    lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii],\n    upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii],\n  };\n\n  protected _alphanum_lower_dict_ranges: ShortUniqueIdRanges = {\n    digits: [this._digit_first_ascii, this._digit_last_ascii],\n    lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii],\n  };\n\n  protected _alphanum_upper_dict_ranges: ShortUniqueIdRanges = {\n    digits: [this._digit_first_ascii, this._digit_last_ascii],\n    upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii],\n  };\n\n  protected _hex_dict_ranges: ShortUniqueIdRanges = {\n    decDigits: [this._digit_first_ascii, this._digit_last_ascii],\n    alphaDigits: [this._alpha_lower_first_ascii, this._hex_last_ascii],\n  };\n\n  /* tslint:disable consistent-return */\n  protected log = (...args: any[]): void => {\n    const finalArgs = [...args];\n    finalArgs[0] = `[short-unique-id] ${args[0]}`;\n    /* tslint:disable no-console */\n    if (this.debug === true) {\n      if (typeof console !== 'undefined' && console !== null) {\n        return console.log(...finalArgs);\n      }\n    }\n    /* tslint:enable no-console */\n  };\n  /* tslint:enable consistent-return */\n\n  /** Change the dictionary after initialization. */\n  setDictionary = (dictionary: string[] | defaultDictionaries, shuffle?: boolean): void => {\n    let finalDict: string[];\n\n    if (dictionary && Array.isArray(dictionary) && dictionary.length > 1) {\n      finalDict = dictionary as string[];\n    } else {\n      finalDict = [];\n\n      let i;\n\n      this.dictIndex = i = 0;\n\n      const rangesName = `_${dictionary as defaultDictionaries}_dict_ranges`;\n      const ranges: ShortUniqueIdRanges = this[rangesName as keyof ShortUniqueId];\n\n      Object.keys(ranges).forEach((rangeType) => {\n        const rangeTypeKey = rangeType;\n\n        this.dictRange = ranges[rangeTypeKey];\n\n        this.lowerBound = this.dictRange[0];\n        this.upperBound = this.dictRange[1];\n\n        for (\n          this.dictIndex = i = this.lowerBound;\n          this.lowerBound <= this.upperBound ? i < this.upperBound : i > this.upperBound;\n          this.dictIndex = this.lowerBound <= this.upperBound ? i += 1 : i -= 1\n        ) {\n          finalDict.push(String.fromCharCode(this.dictIndex));\n        }\n      });\n    }\n\n    if (shuffle) {\n      // Shuffle Dictionary to remove selection bias.\n      const PROBABILITY = 0.5;\n      finalDict = finalDict.sort(() => Math.random() - PROBABILITY);\n    }\n\n    this.dict = finalDict;\n\n    // Cache Dictionary Length for future usage.\n    this.dictLength = this.dict.length;// Resets internal counter.\n    this.counter = 0;\n  };\n\n  seq = (): string => {\n    return this.sequentialUUID();\n  };\n\n  /**\n   * Generates UUID based on internal counter that's incremented after each ID generation.\n   * @alias `const uid = new ShortUniqueId(); uid.seq();`\n   */\n  sequentialUUID = (): string => {\n    let counterDiv: number;\n    let counterRem: number;\n    let id: string = '';\n\n    counterDiv = this.counter;\n\n    do {\n      counterRem = counterDiv % this.dictLength;\n      counterDiv = Math.trunc(counterDiv / this.dictLength);\n      id += this.dict[counterRem];\n    } while (counterDiv !== 0);\n\n    this.counter += 1;\n\n    return id;\n  };\n\n  /**\n   * Generates UUID by creating each part randomly.\n   * @alias `const uid = new ShortUniqueId(); uid(uuidLength: number);`\n   */\n  randomUUID = (uuidLength: number = this.uuidLength || DEFAULT_UUID_LENGTH): string => {\n    let id: string;\n    let randomPartIdx: number;\n    let j: number;\n\n    if ((uuidLength === null || typeof uuidLength === 'undefined') || uuidLength < 1) {\n      throw new Error('Invalid UUID Length Provided');\n    }\n\n    const isPositive = uuidLength >= 0;\n\n    // Generate random ID parts from Dictionary.\n    id = '';\n    for (\n      j = 0;\n      j < uuidLength;\n      j += 1\n    ) {\n      randomPartIdx = parseInt(\n        (Math.random() * this.dictLength).toFixed(0),\n        10,\n      ) % this.dictLength;\n      id += this.dict[randomPartIdx];\n    }\n\n    // Return random generated ID.\n    return id;\n  };\n\n  /**\n   * Calculates total number of possible UUIDs.\n   *\n   * Given that:\n   *\n   * - `H` is the total number of possible UUIDs\n   * - `n` is the number of unique characters in the dictionary\n   * - `l` is the UUID length\n   *\n   * Then `H` is defined as `n` to the power of `l`:\n   *\n   * ![](https://render.githubusercontent.com/render/math?math=%5CHuge%20H=n%5El)\n   *\n   * This function returns `H`.\n   */\n  availableUUIDs = (uuidLength: number = this.uuidLength): number => {\n    return parseFloat(\n      Math.pow([...new Set(this.dict)].length, uuidLength).toFixed(0),\n    );\n  };\n\n  /**\n   * Calculates approximate number of hashes before first collision.\n   *\n   * Given that:\n   *\n   * - `H` is the total number of possible UUIDs, or in terms of this library,\n   * the result of running `availableUUIDs()`\n   * - the expected number of values we have to choose before finding the\n   * first collision can be expressed as the quantity `Q(H)`\n   *\n   * Then `Q(H)` can be approximated as the square root of the product of half\n   * of pi times `H`:\n   *\n   * ![](https://render.githubusercontent.com/render/math?math=%5CHuge%20Q(H)%5Capprox%5Csqrt%7B%5Cfrac%7B%5Cpi%7D%7B2%7DH%7D)\n   *\n   * This function returns `Q(H)`.\n   * \n   * (see [Poisson distribution](https://en.wikipedia.org/wiki/Poisson_distribution))\n   */\n  approxMaxBeforeCollision = (rounds: number = this.availableUUIDs(this.uuidLength)): number => {\n    return parseFloat(\n      Math.sqrt((Math.PI / 2) * rounds).toFixed(20),\n    );\n  };\n\n  /**\n   * Calculates probability of generating duplicate UUIDs (a collision) in a\n   * given number of UUID generation rounds.\n   *\n   * Given that:\n   *\n   * - `r` is the maximum number of times that `randomUUID()` will be called,\n   * or better said the number of _rounds_\n   * - `H` is the total number of possible UUIDs, or in terms of this library,\n   * the result of running `availableUUIDs()`\n   *\n   * Then the probability of collision `p(r; H)` can be approximated as the result\n   * of dividing the square root of the product of half of pi times `r` by `H`:\n   *\n   * ![](https://render.githubusercontent.com/render/math?math=%5CHuge%20p(r%3B%20H)%5Capprox%5Cfrac%7B%5Csqrt%7B%5Cfrac%7B%5Cpi%7D%7B2%7Dr%7D%7D%7BH%7D)\n   *\n   * This function returns `p(r; H)`.\n   * \n   * (see [Poisson distribution](https://en.wikipedia.org/wiki/Poisson_distribution))\n   *\n   * (Useful if you are wondering _\"If I use this lib and expect to perform at most\n   * `r` rounds of UUID generations, what is the probability that I will hit a duplicate UUID?\"_.)\n   */\n  collisionProbability = (\n    rounds: number = this.availableUUIDs(this.uuidLength),\n    uuidLength: number = this.uuidLength,\n  ): number => {\n    return parseFloat(\n      (\n        this.approxMaxBeforeCollision(rounds) / this.availableUUIDs(uuidLength)\n      ).toFixed(20),\n    );\n  };\n\n  /**\n   * Calculate a \"uniqueness\" score (from 0 to 1) of UUIDs based on size of\n   * dictionary and chosen UUID length.\n   *\n   * Given that:\n   *\n   * - `H` is the total number of possible UUIDs, or in terms of this library,\n   * the result of running `availableUUIDs()`\n   * - `Q(H)` is the approximate number of hashes before first collision,\n   * or in terms of this library, the result of running `approxMaxBeforeCollision()`\n   *\n   * Then `uniqueness` can be expressed as the additive inverse of the probability of\n   * generating a \"word\" I had previously generated (a duplicate) at any given iteration\n   * up to the the total number of possible UUIDs expressed as the quotiend of `Q(H)` and `H`:\n   *\n   * ![](https://render.githubusercontent.com/render/math?math=%5CHuge%201-%5Cfrac%7BQ(H)%7D%7BH%7D)\n   *\n   * (Useful if you need a value to rate the \"quality\" of the combination of given dictionary\n   * and UUID length. The closer to 1, higher the uniqueness and thus better the quality.)\n   */\n  uniqueness = (rounds: number = this.availableUUIDs(this.uuidLength)): number => {\n    const score = parseFloat(\n      (1 - (\n        this.approxMaxBeforeCollision(rounds) / rounds\n      )).toFixed(20),\n    );\n    return (\n      score > 1\n    ) ? (\n      1\n    ) : (\n      (score < 0) ? 0 : score\n    );\n  };\n\n  /**\n   * Return the version of this module.\n   */\n  getVersion = (): string => {\n    return this.version;\n  };\n\n  /**\n   * Generates a UUID with a timestamp that can be extracted using `uid.parseStamp(stampString);`.\n   * \n   * ```js\n   *  const uidWithTimestamp = uid.stamp(32);\n   *  console.log(uidWithTimestamp);\n   *  // GDa608f973aRCHLXQYPTbKDbjDeVsSb3\n   * \n   *  console.log(uid.parseStamp(uidWithTimestamp));\n   *  // 2021-05-03T06:24:58.000Z\n   *  ```\n   */\n  stamp = (finalLength: number): string => {\n    if (typeof finalLength !== 'number' || finalLength < 10) {\n      throw new Error('Param finalLength must be number greater than 10');\n    }\n\n    const hexStamp = Math.floor(+new Date() / 1000).toString(16);\n\n    const idLength = finalLength - 9;\n\n    const rndIdx = Math.round(Math.random() * ((idLength > 15) ? 15 : idLength));\n\n    const id = this.randomUUID(idLength);\n\n    return `${id.substr(0, rndIdx)}${hexStamp}${id.substr(rndIdx)}${rndIdx.toString(16)}`;\n  };\n\n  /**\n   * Extracts the date embeded in a UUID generated using the `uid.stamp(finalLength);` method.\n   * \n   * ```js\n   *  const uidWithTimestamp = uid.stamp(32);\n   *  console.log(uidWithTimestamp);\n   *  // GDa608f973aRCHLXQYPTbKDbjDeVsSb3\n   * \n   *  console.log(uid.parseStamp(uidWithTimestamp));\n   *  // 2021-05-03T06:24:58.000Z\n   *  ```\n   */\n  parseStamp = (stamp: string): Date => {\n    if (stamp.length < 10) {\n      throw new Error('Stamp length invalid');\n    }\n\n    const rndIdx = parseInt(stamp.substr(stamp.length - 1, 1), 16);\n\n    return new Date(parseInt(stamp.substr(rndIdx, 8), 16) * 1000);\n  };\n\n  constructor(argOptions: Partial<ShortUniqueIdOptions> = {}) {\n    super();\n\n    const options: ShortUniqueIdOptions = {\n      ...DEFAULT_OPTIONS,\n      ...argOptions as Partial<ShortUniqueIdOptions>,\n    };\n\n    this.counter = 0;\n    this.debug = false;\n    this.dict = [];\n    this.version = version;\n\n    const {\n      dictionary,\n      shuffle,\n      length,\n    } = options;\n\n    this.uuidLength = length;\n\n    this.setDictionary(dictionary, shuffle);\n\n    this.debug = options.debug;\n    this.log(this.dict);\n    this.log((`Generator instantiated with Dictionary Size ${this.dictLength}`));\n\n    return new Proxy(this, {\n      apply: (target, that, args) => this.randomUUID(...args),\n    });\n  }\n}\n", "import ShortUniqueId from 'short-unique-id';\n\n// @ts-ignore\nimport { version } from '../package.json';\n\ntype milliseconds = number;\n\nexport type PayloadId = string;\n\nexport type QueueableFunction<O = {[k: string]: any}, R = void> = (options: O) => Promise<R>;\n\nexport type QueueableSyncFunction<O = {[k: string]: any}, R = void> = (options: O) => R;\n\nexport interface FunctionQueueResult<R = void> {\n  id: PayloadId;\n  duration: milliseconds;\n  startTimestamp: number;\n  endTimestamp: number;\n  result?: R;\n  error?: any;\n};\n\nexport interface FunctionQueueOptions {\n  waitTimeBetweenRuns: milliseconds;\n  getResultTimeout: milliseconds;\n  maxRetries: number;\n  cleanupResultsOlderThan: milliseconds;\n}\n\ninterface FunctionQueueEntry<O = {[k: string]: any}, R = void> {\n  id: PayloadId;\n  payload: O;\n  result?: FunctionQueueResult<R>;\n}\n\nconst uid = new ShortUniqueId({length: 8});\n\nconst defaultOptions: FunctionQueueOptions = {\n  waitTimeBetweenRuns: 100,\n  getResultTimeout: 60000,\n  maxRetries: 1,\n  cleanupResultsOlderThan: 60000,\n};\n\nconst sleep = (ms: milliseconds) => new Promise(resolve => setTimeout(resolve, ms));\n\nclass FunctionQueue<O = {[k: string]: any}, R = void> {\n  static version = version;\n\n  private _fn: QueueableFunction<O, R>;\n  private _queue: FunctionQueueEntry<O, R>[] = [];\n  private _options: FunctionQueueOptions;\n  private _processing: Boolean = false;\n\n  public results: FunctionQueueResult<R>[] = [];\n  public processQueuePromise: Promise<FunctionQueueResult<R>[]> = Promise.resolve([]);\n\n  constructor(\n    fn: QueueableFunction<O, R>,\n    options?: Partial<FunctionQueueOptions>,\n  ) {\n    this._fn = fn;\n    this._options = {\n      ...defaultOptions,\n      ...(options || {}),\n    };\n  }\n\n  public queuePayload(payload: O): PayloadId {\n    const id: PayloadId = uid();\n\n    this._queue.push({payload, id});\n\n    return id;\n  }\n\n  private _tryFn = async (id: string, payload: O, startTimestamp: number): Promise<FunctionQueueResult<R>> => {\n    let retries = 0;\n\n    let finalResult: FunctionQueueResult<R> | undefined;\n\n    while ((!finalResult || (finalResult as any).error) && retries <= this._options.maxRetries) {\n      retries++;\n\n      try {\n        await sleep(this._options.waitTimeBetweenRuns);\n\n        const fnResult = await this._fn(payload);\n        const endTimestamp = Date.now();\n        const duration = endTimestamp - startTimestamp;\n\n        finalResult = {\n          id,\n          duration,\n          startTimestamp,\n          endTimestamp,\n          result: fnResult,\n        };\n      } catch (error) {\n        const endTimestamp = Date.now();\n        const duration = endTimestamp - startTimestamp;\n\n        finalResult = {\n          id,\n          duration,\n          startTimestamp,\n          endTimestamp,\n          error,\n        };\n      }\n    }\n\n    return finalResult as FunctionQueueResult<R>;\n  }\n\n  private async _processQueue(): Promise<void> {\n    this._processing = true;\n\n    let entry: FunctionQueueEntry<O, R>;\n\n    const startTimestamp = Date.now();\n\n    while (entry = this._queue.shift() as FunctionQueueEntry<O, R>) {\n      const { payload, id } = entry;\n\n      try {\n        const result = await this._tryFn(id, payload, startTimestamp);\n\n        this.results.push(\n          {\n            ...result,\n          }\n        );\n      } catch (error) {\n        const endTimestamp = Date.now();\n\n        this.results.push(\n          {\n            id,\n            startTimestamp,\n            duration: endTimestamp - startTimestamp,\n            endTimestamp,\n            error,\n          }\n        );\n      }\n    }\n\n    this._processing = false;\n  }\n\n  public cleanupResults(): void {\n    this.results = this.results.filter(\n      (r) => {\n        const age = (Date.now() - r.endTimestamp);\n\n        return age < this._options.cleanupResultsOlderThan;\n      }\n    );\n  }\n\n  public async processQueue(): Promise<void> {\n    if (this._processing) {\n      return;\n    }\n\n    this.cleanupResults();\n\n    this.processQueuePromise = this._processQueue().then(() => this.results);\n  }\n\n  public async getResult(id: string): Promise<FunctionQueueResult<R>> {\n    this.cleanupResults();\n\n    let result = this.results.find((r) => r.id === id);\n\n    const startTimestamp = Date.now();\n\n    while (!result && (Date.now() - startTimestamp) < this._options.getResultTimeout) {\n      await sleep(this._options.waitTimeBetweenRuns);\n      result = this.results.find((r) => r.id === id);\n    }\n\n    if (!result) {\n      const endTimestamp = Date.now();\n\n      return {\n        id,\n        startTimestamp,\n        duration: endTimestamp - startTimestamp,\n        endTimestamp,\n        error: new Error(\n          `Result for id ${id} not found (timeout of ${this._options.getResultTimeout}ms exceeded)`\n        ),\n      };\n    }\n\n    this.results = this.results.filter((r) => r.id !== id);\n\n    return result;\n  }\n}\n\nexport default FunctionQueue;\n"],
  "mappings": "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",
  "names": []
}
